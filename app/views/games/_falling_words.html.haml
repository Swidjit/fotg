
#game-board
  #typing-input{:type => "text", :contentEditable => "true"}
  #strikes
    .strike X
    .strike X
    .strike X
  #strikes-down

  #correct
  #pieces

:css
  #game {
    position: relative;
  }
  #pieces {
    position: absolute;
    top: 0px;
    z-index: 10;
    width: 100%;
  }
  #game-board {
    display: none;
    overflow-y:hidden;
    width: 100%;
    background-color: beige;

  }

  #typing-input {
    border: 2px solid gray;
    font-size: 25px;
    left: 10px;
    right: 105px;
    top: 8px;
    position: absolute;
    height: 40px;
    padding: 2px 7px;
    font-weight: bold;
    color: #000;
    background-color: #fff;
    z-index: 1000;
  }
  #strikes, #strikes-down {
    position: absolute;
    right: 15px;
    width: 90px;
    color: #bbb;
    z-index: 87;
    top: 8px;
  }
  #strikes-down {
    color: red !important;
    z-index: 88;
  }
  #correct {
    background: url('clover.png') 2px 2px no-repeat;
    background-size: 100px;
    right: 5px;
    position: absolute;
    height: 40px;
    width: 40px;
    color: #000;

    z-index: 1001;
  }
  .piece {
    top: 50px;
    display:block;
    font-size: 26px;
    line-height: 25px;
    font-weight: bold;
    padding: 3px 5px;
    position: absolute;
    opacity: 0;
    width: 95%;
    margin: auto;
    text-align: center;
    color: black;

  }

  .strike, .striked {
    float: right;
    font-size: 30px;
    font-weight: 700;
    margin-left: 8px;
  }
  .striked {
    color: red;
  }


:javascript
  var words;
  var strikes;
  var game_session;
  var round_num;
  var score;
  var points;
  var word_length;
  var score;
  var game_speed;
  var int;
  $('div[contenteditable]').keydown(function(e) {
    // trap the return key being pressed
    if (e.keyCode === 13) {
      // insert 2 br tags (if only one br tag is inserted the cursor won't go to the next line)

      // prevent the default behaviour of return key pressed
      return false;
    }
  });

  $('#typing-input').on("keyup", function(event) {

    var keycode = (event.keyCode ? event.keyCode : event.which);

    if(keycode == '13'){
      $( ".piece" ).each(function() {
        if($.trim($(this)[0].textContent).toLowerCase() == $.trim($('#typing-input').text()).toLowerCase()) {
          play_score = ($('#game-board').height()-parseInt($(this).css('top'), 10))/100 * $.trim($(this)[0].textContent).length;
          points += parseInt(play_score);
          $(this).stop();
          $(this).remove();
          $('#typing-input').text('');

          if(game_words.length == 0) {
            clearInterval(int);
            if($('#pieces').children().length == 0) {
              roundComplete();
            }
          }
          else {
            if($('#pieces').children().length == 0) {
              clearInterval(int);
              nextPiece();
              int = setInterval(nextPiece, new_word_interval);
            }
          }
        }
      });
    }
  });


  function initGame() {

    $('#game-board').css('height','450px');
    $('#game').css('height','450px');


    $('#game-board').show();
    $('#begin').hide();
    $('#pause').remove();
    $('#game-desc').hide();

    round_num = 0;
    time = 17500;

    time_remaining = time;
    word_count = 12;
    word_length = 4;
    score=0;
    game_speed = 11;
    new_word_interval = 4500;
    window.location = '#title';
    nextRound();

  }

  function nextRound() {
    $('#pieces').empty();
    $('#strikes-down').empty();
    $('#game-board').show();

    round_num++;
    points = 0;
    strikes=0;



    word_length+=2;
    game_words = [];
    game_speeds = [];
    if(round_num%4==1) {
      game_speed-=1.5;
      new_word_interval -= 500;
      word_length = 4;
    }
   $.get('/words-'+word_length+'.txt', function(data) {
      words = data.split(' ');

      $('#typing-input').focus();
      $('#typing-input').text('');
      for(var i=0; i < word_count; i++) {
        spot = parseInt(Math.random() * (words.length));
        word = words.slice(spot, spot+1)[0];
        game_words.push(word);
      }

      $('#gameComplete').foundation('reveal','close');
      $('#roundComplete').foundation('reveal','close');
      setSpeeds();
      clearInterval(int);
      nextPiece();
      int = setInterval(nextPiece, new_word_interval);

    });


  }

  function nextPiece() {
    word = game_words.pop();
    if(game_words.length == 0) clearInterval(int);
    w = $('#game').width() / 2;
    h = $('#game-board').height();
    $('<div class="piece">'+ word + '</div>').appendTo('#pieces')
    .animate({opacity:"1"}, 200)
    .animate(
      {
      top: h
      },
      {
        duration: game_speeds.pop(),
        easing: "easeInQuad",
        complete: function() {
          len = $(this);
          //$('#game-board').css('height',$('#game-board').height() - 75);
          $('<div class="striked">X</div>').appendTo('#strikes-down');
          strikes++;
          if(strikes == 3) {
            lost();
          }

          //if($('#game-board').height() < 50) gameOver();
          $(this).remove();
          if($('#pieces').children().length == 0 && game_words.length == 0) {

            roundComplete();
          }
        }
      }
    );

  }

  function setSpeeds() {
    for(var i=0; i< (game_words.length / 7); i++) {
      for(var j=game_speed-3; j<=game_speed+3; j++) {
        game_speeds.push(j*1000);
      }
    }
  }


  function calculateScore() {
    round_score = points * round_num;
    score += round_score;
    $('.round').html("Round Score: "+ round_score);
    $('.total').html("Total Score: "+ score);

  }

  function lost() {
    $('#game-board').hide();
    clearInterval(int);
    $('.piece').stop();
    $('#pieces').empty();
    round_score = points;
    score += points;
    gameOver();
  }

  function roundComplete() {

    clearInterval(int);
    $('.piece').stop();
    $('#pieces').empty();
    calculateScore();
    $('#roundComplete').foundation('reveal', 'open');
    saveScore('in_progress');
    $('#game-board').hide();

  }




